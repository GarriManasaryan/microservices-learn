services:

  # # microservice 3
  # db-lower:
  #   image: postgres:14.5
  #   container_name: db_lower
  #   hostname: db_lower_host
  #   environment:
  #     - POSTGRES_PASSWORD=1
  #     - POSTGRES_USER=postgres
  #   # depends_on:
  #   #   - opentelemetry-collector
  #   volumes:
  #     - pg_lower:/var/lib/postgresql/data

  #   expose:
  #     - "5435"
  #   ports:
  #     - "5435:5435"
  #   command: -p 5435
  #   networks:
  #     - my-net

  # backend-lower:
  #   hostname: backend-lower
  #   # depends_on:
  #   #   - db-lower
  #   #   - opentelemetry-collector
  #   build:
  #     dockerfile: Dockerfile_lower.bk

  #   environment:
  #     OTEL_SERVICE_NAME: "lower-app"
  #     OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://opentelemetry-collector:4318/v1/traces"
  #     OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: "http://opentelemetry-collector:4318/v1/metrics"
  #     OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: "http://opentelemetry-collector:4318/v1/logs"
  #     # Logs are disabled by default
  #     OTEL_LOGS_EXPORTER: "otlp"
  #     # Optional specify file configuration instead of using environment variable scheme
  #     # To use, call "export OTEL_EXPERIMENTAL_CONFIG_FILE=/sdk-config.yaml" before calling docker compose up
  #     OTEL_EXPERIMENTAL_CONFIG_FILE:
  #     OTEL_EXPORTER_OTLP_TIMEOUT: "5s"       # Increases the timeout for each request
  #     OTEL_EXPORTER_OTLP_SPAN_TIMEOUT: "5s"  # Sets span-specific timeout

  #   networks:
  #     - my-net
  #   ports:
  #     - "8083:8080"

  # opentelemetry-collector:
  #   hostname: opentelemetry-collector
  #   image: otel/opentelemetry-collector:0.72.0
  #   volumes:
  #     - ./collector-spring-native-config.yml:/collector-spring-native-config.yml
  #   command: ['--config=/collector-spring-native-config.yml']
  #   expose:
  #     - '4317'
  #     - '4318'
  #   ports:
  #     - "4317:4317"   # OTLP gRPC receiver
  #     - "4318:4318"   # Http
  #     - "8888:8888"   # Prometheus metrics exposed by the collector
  #     - "8889:8889"   # Prometheus exporter metrics
  #   networks:
  #     - my-net

  # prometheus:
  #   hostname: prometheus
  #   image: prom/prometheus:latest
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"  # Prometheus UI
  #   networks:
  #     - my-net
  #   depends_on:
  #     - opentelemetry-collector


  # # jaeger opentelemtry не поддерживает?
  # jaeger:
  #   hostname: jaeger
  #   image: jaegertracing/all-in-one:latest
  #   ports:
  #     - "4317:4317"
  #   networks:
  #     - my-net

  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana-storage:/var/lib/grafana
  #   networks:
  #     - my-net


  # # Zipkin
  # zipkin:
  #   hostname: zipkin  
  #   image: openzipkin/zipkin:latest
  #   environment:
  #     - JAVA_OPTS=-Xms1024m -Xmx1024m -XX:+ExitOnOutOfMemoryError
  #   ports:
  #     - "9411:9411"
  #   networks:
  #     - my-net

  # # kafka
  # zookeeper: - НЕ НУЖНО БОЛЬШЕ, можно удалить имадж
  #   image: bitnami/zookeeper:3.9.3
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes
  #   networks:
  #     - my-net

  # kafka:
  #   image: confluentinc/cp-kafka:7.5.0
  #   container_name: kafka
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - kafka_data:/var/lib/kafka/data
  #   networks:
  #     - my-net
  #   ports:
  #     - "9092:9092"
  #     - "9093:9093"
  #   environment:
  #     KAFKA_KRAFT_MODE: "true"  # This enables KRaft mode in Kafka.
  #     KAFKA_PROCESS_ROLES: controller,broker  # Kafka acts as both broker and controller.
  #     KAFKA_NODE_ID: 1  # A unique ID for this Kafka instance.
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"  # Defines the controller voters.
  #     KAFKA_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
  #     KAFKA_LOG_DIRS: /var/lib/kafka/data  # Where Kafka stores its logs.
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Kafka will automatically create topics if needed.
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Since we’re running one broker, one replica is enough.
  #     KAFKA_LOG_RETENTION_HOURS: 24  # Keep logs for 7 days.
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0  # No delay for consumer rebalancing.
  #     CLUSTER_ID: "NWjlCG2lTG6asGvYo3m-Mw"  # A unique ID for the Kafka cluster.
      
  # kafka-tools:
  #   image: confluentinc/cp-kafka:7.5.0
  #   container_name: kafka-tools
  #   depends_on:
  #     - kafka
  #   networks:
  #     - my-net
  #   command: ["tail", "-f", "/dev/null"]


  # microservice 2
  # PRODUCER
  # db-capitalize:
  #   image: postgres:14.5
  #   container_name: db_capitalize
  #   hostname: db_capitalize_host
  #   environment:
  #     - POSTGRES_PASSWORD=1
  #     - POSTGRES_USER=postgres
  #   volumes:
  #     - pg_capitalize:/var/lib/postgresql/data
  #   expose:
  #     - "5434"
  #   ports:
  #     - "5434:5434"
  #   command: -p 5434
  #   networks:
  #     - my-net

  backend-capitalize:
    hostname: backend-capitalize
    build:
      dockerfile: Dockerfile_capitalize.bk
    networks:
      - my-net
    ports:
      # именно на 8080, чтобы http://localhost:8080/actuator/prometheus работал
      # те prometheus поднят на 9090, но и сам спринг должен отправлять свои метрики на адрес выше
      - "8080:8080"
  

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./capitalize/prometheus_config.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - my-net

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - my-net


  # microservice 1
  # CONSUMER
  # db-upper:
  #   image: postgres:14.5
  #   container_name: db_upper
  #   hostname: db_upper_host
  #   environment:
  #     - POSTGRES_PASSWORD=1
  #     - POSTGRES_USER=postgres

  #   volumes:
  #     - pg_upper:/var/lib/postgresql/data

  #   expose:
  #     - "5433"
  #   ports:
  #     - "5433:5433"
  #   command: -p 5433
  #   networks:
  #     - my-net

  # backend-upper:
  #   hostname: backend-upper
  #   build:
  #     dockerfile: Dockerfile_upper.bk
  #   ports:
  #     - "8081:8080"
  #   networks:
  #     - my-net

  # frontend:
  #   depends_on:
  #     - backend
  #   build:
  #     dockerfile: Dockerfile.fk
  #   ports:
  #     - "3000:3000"
  #   stdin_open: true
  #   tty: true
  #   networks:
  #     - my-net

volumes:
  pg_upper:
  pg_capitalize:
  pg_lower:
  grafana-storage:
  prom:
  kafka_data:
    driver: local

networks:
  my-net:
    driver: bridge