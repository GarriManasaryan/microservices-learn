plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs += "--enable-preview"
}

tasks.withType(Test).configureEach {
	jvmArgs += "--enable-preview"
}

tasks.withType(JavaExec).configureEach {
	jvmArgs += "--enable-preview"
}

repositories {
	mavenCentral()
}

task copyAppJar(type:Copy){
	dependsOn bootJar
	from bootJar.archiveFile.get().asFile
	rename {String filename -> return "lower.jar"}
	into "${rootProject.buildDir}/output-docker"
}

dependencies {
	compileOnly 'org.jetbrains:annotations:23.0.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Micrometer Core
	implementation 'io.micrometer:micrometer-core'

	// Micrometer Tracing with OpenTelemetry
	implementation 'io.micrometer:micrometer-tracing'
	implementation 'io.opentelemetry:opentelemetry-api'
	implementation 'io.opentelemetry:opentelemetry-sdk'

	// OpenTelemetry Exporters
	implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'
	implementation 'io.opentelemetry:opentelemetry-exporter-otlp'

	// Micrometer OpenTelemetry bridge
	implementation 'io.micrometer:micrometer-registry-prometheus'


//	// opentelemetry new
//	implementation(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:2.6.0"))
//	implementation("io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter")
////	implementation("io.opentelemetry:opentelemetry-exporter-zipkin")

//	// prometheus
//	implementation 'org.springframework.boot:spring-boot-starter-actuator'
//	implementation 'io.micrometer:micrometer-registry-prometheus'




//	// opentelemetry inner config
//	implementation 'org.springframework.boot:spring-boot-starter-web'
//
//	implementation('org.springframework.cloud:spring-cloud-starter-sleuth') {
//		exclude group: 'org.springframework.cloud', module: 'spring-cloud-sleuth-brave'
//	}
//
//	implementation 'org.springframework.cloud:spring-cloud-sleuth-otel-autoconfigure'
//	implementation 'io.opentelemetry:opentelemetry-exporter-otlp'
//	implementation("io.opentelemetry:opentelemetry-exporter-zipkin")
//	implementation 'io.opentelemetry.instrumentation:opentelemetry-logback-appender'




	runtimeOnly 'org.flywaydb:flyway-core'
	implementation 'org.postgresql:postgresql'
//	implementation 'org.springframework.kafka:spring-kafka'
	testImplementation 'org.assertj:assertj-core:3.23.1'

//	implementation(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom"))
//	implementation("io.opentelemetry:opentelemetry-api")
	implementation("io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter")

}

dependencyManagement {
	imports {
//		mavenBom "org.springframework.cloud:spring-cloud-dependencies:2021.0.6"
//		mavenBom "org.springframework.cloud:spring-cloud-sleuth-otel-dependencies:1.1.2"
		mavenBom "io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:2.6.0"
	}
}


tasks.named('test') {
	useJUnitPlatform()
}
